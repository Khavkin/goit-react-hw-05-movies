{"version":3,"file":"static/js/12.25b45f78.chunk.js","mappings":"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","sources":["../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","api/moviedb-api.js","components/CastCard/CastCard.styled.js","components/CastCard/CastCard.jsx","components/Cast/Cast.styled.js","components/Cast/Cast.jsx","components/MessageBox/MessageBox.styled.js","components/MessageBox/MessageBox.jsx"],"sourcesContent":["function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n      args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n      _next(undefined);\n    });\n  };\n}","const API_KEY = 'cedb0d61b1d63f0d25850ca71581631f';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst BASE_IMAGE_URL = 'https://image.tmdb.org/t/p/w500';\n\nexport async function getTrending() {\n  try {\n    const responce = await fetch(\n      `${BASE_URL}trending/all/week?api_key=${API_KEY}`\n    );\n    if (responce.status === 200) {\n      const result = await responce.json();\n      return result.results.map(item => {\n        return {\n          id: item.id,\n          name: item.name || item.title,\n          poster_path: getImagePath(item.poster_path),\n        };\n      });\n    } else return [];\n  } catch (error) {\n    return new Promise.reject(\n      `Ошибка ${error.message} получения информации фильмам `\n    );\n  }\n}\n\nexport async function getMovieInfo(movieID) {\n  try {\n    const responce = await fetch(\n      `${BASE_URL}movie/${movieID}?api_key=${API_KEY}&language=en-US`\n    );\n    if (responce.status === 200) {\n      const result = await responce.json();\n\n      return result;\n    } else return {};\n  } catch (error) {\n    return new Promise.reject(\n      `Ошибка ${error.message} получения информации фильму ${movieID}  `\n    );\n  }\n}\nexport async function getMovieReview(movieID) {\n  try {\n    const responce = await fetch(\n      `${BASE_URL}movie/${movieID}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n    );\n    if (responce.status === 200) {\n      const result = await responce.json();\n\n      return result?.results.map(({ author, content, id }) => ({\n        author,\n        content,\n        id,\n      }));\n    } else return [];\n  } catch (error) {\n    return new Promise.reject(\n      `Ошибка ${error.message} получения отзывов к фильму ${movieID}  `\n    );\n  }\n}\n\nexport async function getMovieCredits(movieID) {\n  try {\n    const responce = await fetch(\n      `${BASE_URL}movie/${movieID}/credits?api_key=${API_KEY}&language=en-US&page=1`\n    );\n    if (responce.status === 200) {\n      const resp = await responce.json();\n      //console.dir(resp);\n      const results = resp.cast.map(item => {\n        return {\n          id: item.id,\n          name: item.name,\n          original_name: item.original_name,\n          popularity: item.popularity,\n          profile_path: getImagePath(item.profile_path),\n          character: item.character,\n        };\n      });\n\n      return results;\n    } else return [];\n  } catch (error) {\n    return new Promise.reject(\n      `Ошибка ${error.message} получения актеров фильма ${movieID}  `\n    );\n  }\n}\n\nexport async function searchMovie(query = '') {\n  try {\n    if (query === '') return [];\n    const responce = await fetch(\n      `${BASE_URL}search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`\n    );\n    //search/movie?api_key=cedb0d61b1d63f0d25850ca71581631f&language=en-US&query=stargate&page=1&include_adult=false\n    if (responce.status === 200) {\n      const result = await responce.json();\n      return result.results.map(item => {\n        return {\n          id: item.id,\n          name: item.name || item.title,\n          poster_path: getImagePath(item.poster_path),\n        };\n      });\n    } else return [];\n  } catch (error) {\n    return new Promise.reject(\n      `Ошибка ${error.message} поиска фильма по запросу ${query}`\n    );\n  }\n}\n\nexport function getImagePath(image) {\n  return image ? BASE_IMAGE_URL + image : 'https://via.placeholder.com/300x400';\n}\n","import styled from '@emotion/styled';\n\nexport const CastCardWrapper = styled.li`\n  flex-basis: Calc((100% - 5 * 10px) / 6);\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-content: center;\n  flex-wrap: wrap;\n`;\n\nexport const CastThumb = styled.div`\n  height: 200px;\n  width: 100%;\n`;\n\nexport const CastImage = styled.img`\n  height: 100%;\n  object-fit: cover;\n`;\nexport const CastName = styled.p`\n  font-weight: 700;\n  padding: 5px;\n  margin: 0;\n`;\nexport const CastCharacter = styled.p`\n  padding: 5px;\n  margin: 0;\n  color: #bdbdbd;\n`;\n\nexport const CastDescription = styled.div`\n  height: 80px;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  color: #fff;\n`;\n","import {\n  CastCardWrapper,\n  CastCharacter,\n  CastDescription,\n  CastImage,\n  CastName,\n  CastThumb,\n} from './CastCard.styled';\nimport PropTypes from 'prop-types';\n\nconst CastCard = ({ cast }) => {\n  return (\n    <CastCardWrapper>\n      <CastThumb>\n        <CastImage src={cast.profile_path} alt=\"\" />\n      </CastThumb>\n      <CastDescription>\n        <CastName>{cast.name}</CastName>\n        <CastCharacter>Character: {cast.character}</CastCharacter>\n      </CastDescription>\n    </CastCardWrapper>\n  );\n};\n\nCastCard.propTypes = {\n  cast: PropTypes.shape({\n    profile_path: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    character: PropTypes.string.isRequired,\n  }),\n};\n\nexport default CastCard;\n","import styled from '@emotion/styled';\n\nexport const CastList = styled.ul`\n  display: flex;\n  gap: 10px;\n  flex-wrap: wrap;\n`;\n","import { getMovieCredits } from 'api/moviedb-api';\nimport CastCard from 'components/CastCard';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { CastList } from './Cast.styled';\nimport MessageBox from 'components/MessageBox/MessageBox';\n\nconst Cast = () => {\n  const { moveID } = useParams();\n  const [casts, setCasts] = useState(null);\n\n  //console.dir(casts);\n\n  useEffect(() => {\n    getMovieCredits(moveID).then(response => {\n      const cast = response.map(item => {\n        return {\n          profile_path: item.profile_path,\n          name: item.name ?? '',\n          character: item.character ?? '',\n          id: item.id,\n        };\n      });\n      setCasts(cast);\n    });\n  }, [moveID]);\n  if (casts?.length !== 0)\n    return (\n      <CastList>\n        {casts && casts.map(cast => <CastCard key={cast.id} cast={cast} />)}\n      </CastList>\n    );\n  if (casts?.length === 0)\n    return <MessageBox>We don't have any casts for this movie</MessageBox>;\n};\n\nexport default Cast;\n","import styled from '@emotion/styled';\n\nexport const MessageBoxContainer = styled.div`\n  width: 70%;\n  padding: 30px;\n  /* height: 200px; */\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: #536dfe;\n  color: #fff;\n  font-weight: 700;\n  font-size: 30px;\n  margin: 0 auto;\n`;\n","import { MessageBoxContainer } from './MessageBox.styled';\nimport PropTypes from 'prop-types';\n\nconst MessageBox = ({ children }) => {\n  return <MessageBoxContainer>{children}</MessageBoxContainer>;\n};\n\nMessageBox.propTypes = { children: PropTypes.string.isRequired };\n\nexport default MessageBox;\n"],"names":["asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined","API_KEY","BASE_URL","getTrending","fetch","responce","status","json","result","results","map","item","id","name","title","poster_path","getImagePath","message","getMovieInfo","movieID","getMovieReview","author","content","getMovieCredits","resp","cast","original_name","popularity","profile_path","character","searchMovie","query","image","CastCardWrapper","styled","CastThumb","CastImage","CastName","CastCharacter","CastDescription","src","alt","CastList","moveID","useParams","useState","casts","setCasts","useEffect","response","length","MessageBox","MessageBoxContainer","children"],"sourceRoot":""}