{"version":3,"file":"static/js/684.abd38c4c.chunk.js","mappings":"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","sources":["api/moviedb-api.js","components/InfoLine/InfoLine.styled.js","components/InfoLine/InfoLine.jsx","components/MovieCard/MovieCard.styled.js","components/MovieCard/MovieCard.jsx","pages/MovieInfo/MovieInfo.jsx"],"sourcesContent":["const API_KEY = 'cedb0d61b1d63f0d25850ca71581631f';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst BASE_IMAGE_URL = 'https://image.tmdb.org/t/p/w500';\n\nexport async function getTrending() {\n  try {\n    const responce = await fetch(\n      `${BASE_URL}trending/all/week?api_key=${API_KEY}`\n    );\n    if (responce.status === 200) {\n      const result = await responce.json();\n      return result.results.map(item => {\n        return { id: item.id, name: item.name || item.title };\n      });\n    } else return [];\n  } catch (error) {\n    console.error(error.message);\n  }\n}\n\nexport async function getMovieInfo(movieID) {\n  try {\n    const responce = await fetch(\n      `${BASE_URL}movie/${movieID}?api_key=${API_KEY}&language=en-US`\n    );\n    if (responce.status === 200) {\n      const result = await responce.json();\n\n      return result;\n    } else return {};\n  } catch (error) {\n    console.error(error.message);\n  }\n}\nexport async function getMovieReview(movieID) {\n  try {\n    const responce = await fetch(\n      `${BASE_URL}movie/${movieID}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n    );\n    if (responce.status === 200) {\n      const result = await responce.json();\n\n      return result?.results.map(({ author, content, id }) => ({\n        author,\n        content,\n        id,\n      }));\n    } else return [];\n  } catch (error) {\n    console.error(error.message);\n  }\n}\n\nexport async function getMovieCredits(movieID) {\n  try {\n    const responce = await fetch(\n      `${BASE_URL}movie/${movieID}/credits?api_key=${API_KEY}&language=en-US&page=1`\n    );\n    if (responce.status === 200) {\n      const resp = await responce.json();\n      //console.dir(resp);\n      const results = resp.cast.map(item => {\n        return {\n          id: item.id,\n          name: item.name,\n          original_name: item.original_name,\n          popularity: item.popularity,\n          profile_path: item.profile_path,\n          character: item.character,\n        };\n      });\n\n      return results;\n    } else return [];\n  } catch (error) {\n    console.error(error.message);\n  }\n}\n\nexport async function searchMovie(query = '') {\n  try {\n    if (query === '') return [];\n    const responce = await fetch(\n      `${BASE_URL}search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`\n    );\n    //search/movie?api_key=cedb0d61b1d63f0d25850ca71581631f&language=en-US&query=stargate&page=1&include_adult=false\n    if (responce.status === 200) {\n      const result = await responce.json();\n      return result.results.map(item => {\n        return { id: item.id, name: item.name || item.title };\n      });\n    } else return [];\n  } catch (error) {\n    console.error(error.message);\n  }\n}\n\nexport function getImagePath(image) {\n  return image ? BASE_IMAGE_URL + image : '';\n}\n","import styled from '@emotion/styled';\n\nexport const InfoLineWrapper = styled.p`\n  display: flex;\n  gap: 5px;\n`;\n","import { InfoLineWrapper } from './InfoLine.styled';\n\nconst InfoLine = ({ title, description }) => {\n  return (\n    <InfoLineWrapper>\n      <span>{title}</span>\n      <span>{description}</span>\n    </InfoLineWrapper>\n  );\n};\nexport default InfoLine;\n","import styled from '@emotion/styled';\n\nexport const MovieCardWrapper = styled.div`\n  display: flex;\n  gap: 20px;\n`;\nexport const ImageWrapper = styled.div`\n  width: 300px;\n  height: 450px;\n  overflow: hidden;\n\n  border-radius: 10px;\n`;\n\nexport const Image = styled.img`\n  object-fit: cover;\n`;\nexport const InfoWrapper = styled.div`\n  width: 600px;\n`;\n","import { getImagePath } from 'api/moviedb-api';\nimport InfoLine from 'components/InfoLine';\nimport {\n  Image,\n  ImageWrapper,\n  InfoWrapper,\n  MovieCardWrapper,\n} from './MovieCard.styled';\nimport PropTypes from 'prop-types';\n\nconst MovieCard = ({ movieInfo }) => {\n  console.dir(movieInfo);\n  const createGenre = genres => {\n    return genres.map(genre => genre.name).join(', ');\n  };\n\n  const getReleaseYear = releaseDate => {\n    return releaseDate !== '' ? `(${new Date(releaseDate).getFullYear()})` : '';\n  };\n  return (\n    <MovieCardWrapper>\n      <ImageWrapper>\n        <Image\n          src={\n            movieInfo.poster_path\n              ? getImagePath(movieInfo.poster_path)\n              : 'https://via.placeholder.com/300x400'\n          }\n        ></Image>\n      </ImageWrapper>\n      <InfoWrapper>\n        <h1>\n          {movieInfo.title} {getReleaseYear(movieInfo.release_date)}\n        </h1>\n        <p>{movieInfo.tagline}</p>\n        <InfoLine title=\"Vote:\" description={movieInfo.vote_average} />\n        <InfoLine title=\"Popularity:\" description={movieInfo.popularity} />\n        <InfoLine title=\"Overview:\" description={movieInfo.overview} />\n        <InfoLine title=\"Genre:\" description={createGenre(movieInfo.genres)} />\n      </InfoWrapper>\n    </MovieCardWrapper>\n  );\n};\n\nMovieCard.propTypes = {\n  genres: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      name: PropTypes.string.isRequired,\n    })\n  ),\n  id: PropTypes.number.isRequired,\n  overview: PropTypes.string,\n  popularity: PropTypes.number.isRequired,\n  poster_path: PropTypes.string,\n  release_date: PropTypes.string.isRequired,\n  tagline: PropTypes.string,\n  title: PropTypes.string.isRequired,\n  vote_average: PropTypes.number.isRequired,\n};\n\nexport default MovieCard;\n\n// genres,\n// homepage,\n// id,\n// original_language,\n// original_title,\n// overview,\n// popularity,\n// poster_path,\n// production_companies,\n// production_countries,\n// release_date,\n// runtime,\n// spoken_languages,\n// tagline,\n// title,\n","import { getMovieInfo } from 'api/moviedb-api';\nimport MovieCard from 'components/MovieCard';\nimport { Suspense, useEffect, useState } from 'react';\nimport { Link, Outlet, useLocation, useParams } from 'react-router-dom';\n\n// const appStatus = {\n//   IDLE: 0,\n//   PENDING: 1,\n//   RESOLVED: 2,\n//   REJECTED: 4,\n// };\n\nconst MovieInfo = () => {\n  const { id } = useParams();\n  const [movieInfo, setMovieInfo] = useState(null);\n  const [isReady, setIsReady] = useState(false);\n\n  //const isMount = useRef(true);\n\n  const location = useLocation();\n\n  const backLinkHref = location.state?.from ?? '/';\n\n  // console.log('movieInfo', movieInfo);\n\n  useEffect(() => {\n    // if (isMount.current) {\n    //   isMount.current = false;\n    getMovieInfo(id).then(responce => {\n      //console.dir(responce);\n      const {\n        genres,\n        id,\n        overview,\n        popularity,\n        poster_path,\n        release_date,\n        tagline,\n        title,\n        vote_average,\n      } = responce;\n      setMovieInfo({\n        genres,\n        id,\n        overview,\n        popularity,\n        poster_path,\n        release_date,\n        tagline,\n        title,\n        vote_average,\n      });\n      setIsReady(true);\n    });\n    // }\n  }, [id]);\n\n  return (\n    <>\n      {/* Movie Info */}\n      <Link to={backLinkHref}>Go back</Link>\n      {isReady && <MovieCard movieInfo={movieInfo} />}\n      <Link to=\"cast\">Cast</Link>\n      <Link to=\"review\">Review</Link>\n      <Suspense fallback={<div>Loading page...</div>}>\n        <Outlet />\n      </Suspense>\n    </>\n  );\n};\n\nexport default MovieInfo;\n"],"names":["API_KEY","BASE_URL","getTrending","fetch","responce","status","json","result","results","map","item","id","name","title","console","error","message","getMovieInfo","movieID","getMovieReview","author","content","getMovieCredits","resp","cast","original_name","popularity","profile_path","character","searchMovie","query","getImagePath","image","InfoLineWrapper","styled","description","MovieCardWrapper","ImageWrapper","Image","InfoWrapper","movieInfo","dir","genres","releaseDate","src","poster_path","release_date","Date","getFullYear","tagline","vote_average","overview","genre","join","useParams","useState","setMovieInfo","isReady","setIsReady","backLinkHref","useLocation","state","from","useEffect","then","to","Suspense","fallback"],"sourceRoot":""}