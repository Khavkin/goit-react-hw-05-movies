{"version":3,"file":"static/js/847.b24d6942.chunk.js","mappings":"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","sources":["api/moviedb-api.js","components/MoviesList/MoviesList.jsx","components/SearchForm/SearchForm.jsx","pages/Movies/Movies.jsx","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["const API_KEY = 'cedb0d61b1d63f0d25850ca71581631f';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst BASE_IMAGE_URL = 'https://image.tmdb.org/t/p/w500';\n\nexport async function getTrending() {\n  try {\n    const responce = await fetch(\n      `${BASE_URL}trending/all/week?api_key=${API_KEY}`\n    );\n    if (responce.status === 200) {\n      const result = await responce.json();\n      return result.results.map(item => {\n        return { id: item.id, name: item.name || item.title };\n      });\n    } else return [];\n  } catch (error) {\n    console.error(error.message);\n  }\n}\n\nexport async function getMovieInfo(movieID) {\n  try {\n    const responce = await fetch(\n      `${BASE_URL}movie/${movieID}?api_key=${API_KEY}&language=en-US`\n    );\n    if (responce.status === 200) {\n      const result = await responce.json();\n\n      return result;\n    } else return {};\n  } catch (error) {\n    console.error(error.message);\n  }\n}\nexport async function getMovieReview(movieID) {\n  try {\n    const responce = await fetch(\n      `${BASE_URL}movie/${movieID}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n    );\n    if (responce.status === 200) {\n      const result = await responce.json();\n\n      return result?.results.map(({ author, content, id }) => ({\n        author,\n        content,\n        id,\n      }));\n    } else return [];\n  } catch (error) {\n    console.error(error.message);\n  }\n}\n\nexport async function getMovieCredits(movieID) {\n  try {\n    const responce = await fetch(\n      `${BASE_URL}movie/${movieID}/credits?api_key=${API_KEY}&language=en-US&page=1`\n    );\n    if (responce.status === 200) {\n      const resp = await responce.json();\n      //console.dir(resp);\n      const results = resp.cast.map(item => {\n        return {\n          id: item.id,\n          name: item.name,\n          original_name: item.original_name,\n          popularity: item.popularity,\n          profile_path: item.profile_path,\n          character: item.character,\n        };\n      });\n\n      return results;\n    } else return [];\n  } catch (error) {\n    console.error(error.message);\n  }\n}\n\nexport async function searchMovie(query = '') {\n  try {\n    if (query === '') return [];\n    const responce = await fetch(\n      `${BASE_URL}search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`\n    );\n    //search/movie?api_key=cedb0d61b1d63f0d25850ca71581631f&language=en-US&query=stargate&page=1&include_adult=false\n    if (responce.status === 200) {\n      const result = await responce.json();\n      return result.results.map(item => {\n        return { id: item.id, name: item.name || item.title };\n      });\n    } else return [];\n  } catch (error) {\n    console.error(error.message);\n  }\n}\n\nexport function getImagePath(image) {\n  return image ? BASE_IMAGE_URL + image : '';\n}\n","//import Movies from 'pages/Movies';\nimport { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nconst MoviesList = ({ movies }) => {\n  const location = useLocation();\n  console.log(location);\n  return (\n    <ul>\n      {movies &&\n        movies.map(item => (\n          <li key={item.id}>\n            <Link\n              to={`${location.pathname === '/' ? 'movies/' : ''}${item.id}`}\n              state={{ from: location }}\n            >\n              {item.name}\n            </Link>\n          </li>\n        ))}\n    </ul>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      name: PropTypes.string.isRequired,\n    })\n  ),\n};\nexport default MoviesList;\n","const SearchForm = ({ query, onSubmit, onChange }) => {\n  const handleSubmitForm = event => {\n    event.preventDefault();\n    const value = event.target.elements.MovieName.value;\n    onSubmit(value);\n  };\n  return (\n    <form onSubmit={handleSubmitForm}>\n      <input\n        name=\"MovieName\"\n        type=\"text\"\n        value={query}\n        onChange={event => {\n          onChange(event.target.value);\n        }}\n        placeholder=\"Enter movie name for search\"\n      ></input>\n      <button type=\"submit\">Search</button>\n    </form>\n  );\n};\n\nexport default SearchForm;\n","import { searchMovie } from 'api/moviedb-api';\nimport MoviesList from 'components/MoviesList/MoviesList';\nimport SearchForm from 'components/SearchForm';\nimport { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const queryStr = searchParams.get('query') ?? '';\n  const [query, setQuery] = useState(queryStr);\n\n  console.log(queryStr);\n\n  const onSearch = toSearch => {\n    setQuery(toSearch);\n  };\n\n  const onQueryChange = value => {\n    const newQuery = value !== '' ? { query: value } : {};\n    setSearchParams(newQuery);\n  };\n\n  useEffect(() => {\n    if (query !== '') {\n      searchMovie(query).then(response => {\n        //onQueryChange()\n        setMovies(response);\n      });\n    }\n  }, [query]);\n\n  return (\n    <div>\n      It's Movies\n      <SearchForm\n        query={queryStr}\n        onSubmit={onSearch}\n        onChange={onQueryChange}\n      />\n      <MoviesList movies={movies}></MoviesList>\n    </div>\n  );\n};\n\nexport default Movies;\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n      args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n      _next(undefined);\n    });\n  };\n}"],"names":["API_KEY","BASE_URL","getTrending","fetch","responce","status","json","result","results","map","item","id","name","title","console","error","message","getMovieInfo","movieID","getMovieReview","author","content","getMovieCredits","resp","cast","original_name","popularity","profile_path","character","searchMovie","query","getImagePath","image","movies","location","useLocation","log","to","pathname","state","from","onSubmit","onChange","event","preventDefault","value","target","elements","MovieName","type","placeholder","useState","setMovies","useSearchParams","searchParams","setSearchParams","queryStr","get","setQuery","useEffect","then","response","toSearch","MoviesList","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","done","Promise","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined"],"sourceRoot":""}